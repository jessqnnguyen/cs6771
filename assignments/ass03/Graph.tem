template <typename N, typename E>
Graph<N,E>::Graph(const Graph& g) : it(g.it) {
  nodes.clear();
  edges.clear();
  for (const auto node : g.nodes) {
    Node n(*node);
    // std::cout << "curr node being copied is" << n.getData() << " and has edge count=" << n.getEdgeCount() << "\n";
    nodes.push_back(std::make_shared<Node>(n));
  }
  for (const auto edge : g.edges) {
    Edge e = *edge;
    edges.push_back(std::make_shared<Edge>(e));
  }
}

template <typename N, typename E>
Graph<N,E>::Graph(Graph&& g) {
  it = std::move(g.it);
  nodes.clear();
  edges.clear();
  for (const auto node : g.nodes) {
    Node n = std::move(*node);
    // std::cout << "curr node being copied is" << n.getData() << " and has edge count=" << n.getEdgeCount() << "\n";
    nodes.push_back(std::make_shared<Node>(n));
  }
  for (const auto edge : g.edges) {
    Edge e = std::move(*edge);
    edges.push_back(std::make_shared<Edge>(e));
  }
  g.clear();
}

template <typename N, typename E>
Graph<N,E>& Graph<N,E>::operator=(Graph&& g) {
  it = std::move(g.it);
  nodes.clear();
  edges.clear();
  for (const auto node : g.nodes) {
    Node n = std::move(*node);
    // std::cout << "curr node being copied is" << n.getData() << " and has edge count=" << n.getEdgeCount() << "\n";
    nodes.push_back(std::make_shared<Node>(n));
  }
  for (const auto edge : g.edges) {
    Edge e = std::move(*edge);
    edges.push_back(std::make_shared<Edge>(e));
  }
  g.clear();
  return *this;
}

template <typename N, typename E>
Graph<N,E>& Graph<N,E>::operator=(const Graph& g) {
  nodes.clear();
  edges.clear();
  for (const auto node : g.nodes) {
    Node n(*node);
    // std::cout << "curr node being copied is" << n.getData() << " and has edge count=" << n.getEdgeCount() << "\n";
    nodes.push_back(std::make_shared<Node>(n));
  }
  for (const auto edge : g.edges) {
    Edge e = *edge;
    edges.push_back(std::make_shared<Edge>(e));
  }
  it = g.it;
  return *this;
}
//
// template <typename N, typename E>
// Graph<N, E>::Graph(Graph &&g) : nodes{std::move(g.nodes)}, edges{std::move(g.edges)},
//                                       it{std::move(g.it)} {}

template <typename N, typename E>
bool Graph<N, E>::addNode(const N& val) {

  // Store return result.
  bool nodeDoesNotExist = true;

  // Check if a node with the value already exists.
  for (const auto node : nodes) {
    if (node->getData() == val) {
      nodeDoesNotExist = false;
    }
  }

  if (nodeDoesNotExist) {
    std::shared_ptr<Node> n(new Node(val));
    nodes.push_back(n);
  }

  return nodeDoesNotExist;
}

template <typename N, typename E>
bool Graph<N, E>::addEdge(const N& src, const N& dest, const E& w) {

  // Store return result.
  bool edgeDoesNotExist = true;

  // Check source and destination nodes exist.
  if (!isNode(src) || !isNode(dest)) {
    throw std::runtime_error("Source or destination node supplied does not exist");
  }

  // Check if the edge already exists.
  for (const auto edge : edges) {
    if ((edge->getSrc() == src) && (edge->getDest() == dest)
         && edge->getWeight() == w) {
        edgeDoesNotExist = false;
    }
  }

  if (edgeDoesNotExist) {
    std::shared_ptr<Edge> e(new Edge (src, dest, w));
    edges.push_back(e);
    for (auto node : nodes) {
      if (node->getData() == src) {
        node->setEdgeCount(node->getEdgeCount() + 1);
      }
    }
  }

  return edgeDoesNotExist;
}

template <typename N, typename E>
bool Graph<N, E>::isNode(const N& val) const {
  bool nodeExists = false;
  for (auto const node : nodes) {
    if (node->getData() == val) {
      nodeExists = true;
    }
  }
  return nodeExists;
}

template <typename N, typename E>
bool Graph<N, E>::replace(const N& oldData, const N& newData) {
  bool replaceSuccessful = false;
  // Check that no nodes exist containing newData.
  if (!isNode(newData)) {
    for (auto node : nodes) {
      if (node->getData() == oldData) {
        node->setData(newData);
        replaceSuccessful = true;
      }
    }
    // A node containing old data was not found case.
    if (!replaceSuccessful) {
        throw std::runtime_error("Node containing old data was not found!");
    }
  }
  return replaceSuccessful;
}

template <typename N, typename E>
void Graph<N,E>::deleteNode(const N& val) noexcept {
  // Check if given node exists.
  if (isNode(val)) {
    int indexToRemove = 0;
    // Find node with the given val and delete.
    for (auto node : nodes) {
      if (node->getData() == val) {
        // std::cout << "about to remove node with data = " << node->getData() << "\n";
        node->getDataPtr().reset();
        node.reset();
        break;
      }
      indexToRemove++;
    }
    // if (indexToRemove != 0) {
    //   nodes.erase(nodes.begin() + (indexToRemove - 1));
    // } else {
    //   nodes.erase(nodes.begin());
    // }
    nodes.erase(std::remove_if(nodes.begin(), nodes.end(), [val] (std::shared_ptr<Node> &n) {
                    return n->getData() == val;
                }), nodes.end());
    std::vector<std::shared_ptr<Edge>> edgesToDelete;
    for (const auto edge : edges) {
      if (edge->getSrc() == val || edge->getDest() == val) {
        edgesToDelete.push_back(edge);
      }
    }
    for (const auto edge : edgesToDelete) {
      deleteEdge(edge->getSrc(), edge->getDest(), edge->getWeight());
    }
    // edges.erase(std::remove_if(edges.begin(), edges.end(),
                            // [val] (std::shared_ptr<Edge> &e) {
                              // return e->getSrc() == val || e->getDest() == val;
                            // }), edges.end());
    // Now loop through edges and check for any edges that have the given val
    // as the source or destination node. If so, remove that edge and also
    // decrement the edge count.
    // std::map<N, int> nodesToUpdate;
    // for (auto edge : edges) {
    //   if (edge->getDest() == val || edge->getSrc() == val) {
    //     deleteEdge(edge->getSrc(), edge->getDest(), edge->getWeight());
    //   }
    // }
    // for (const auto entry : nodesToUpdate) {
    //   for (auto node : nodes) {
    //     if (node->getData() == entry.first()) {
    //       node->setEdgeCount
    //     }
    //   }
    // }

  }
  // printNodes();
}

// Prints the data stored in all the nodes in the graph,
// with one node per line, starting from the node with the smallest
// outdegree to the node with the largest. If two nodes have the
// same edge count, then the one with the smaller node value determined
// by the < operator is printed first. See test11.cpp for an example.
template <typename N, typename E>
void Graph<N, E>::printNodes() const {
  std::vector<std::shared_ptr<Node>> sortedNodes = nodes;
  std::sort(sortedNodes.begin(), sortedNodes.end(),
            [] (const std::shared_ptr<Node> n1,
                const std::shared_ptr<Node> n2) -> bool {
                    bool result = n1->getEdgeCount() == n2->getEdgeCount()
                                  ? n1->getData() < n2->getData()
                                  : n1->getEdgeCount() < n2->getEdgeCount();
                    return result;
            }
          );
  for (const auto node : sortedNodes) {
    std::cout << node->getData() << std::endl;
  }
}

template <typename N, typename E>
void Graph<N,E>::deleteEdge(const N& src, const N& dst, const E& w) noexcept {
  // std::cout << "deleting edge at " << src << " to " << dst << " with weight " << w << "\n";
  // Check edge exists.
  // if (isConnected(src, dst)) {
    // std::cout << src << "-" << dst << " is connected\n";
    // int indexToRemove = 0;
    // for (auto edge : edges) {
    //   if (edge->getSrc() == src && edge->getDest() == dst && edge->getWeight() == w) {
    //     edge->getSrcPtr().reset();
    //     edge->getDestPtr().reset();
    //     edge->getWeightPtr().reset();
    //     edge.reset();
    //     break;
    //   }
    //   indexToRemove++;
    // }
    // std::cout << "index to remove is " << indexToRemove << "\n";
    // edges.erase(edges.begin() + indexToRemove);
    // printEdges(src);
    // if (indexToRemove != 0) {
    //   edges.erase(edges.begin() + (indexToRemove - 1));
    // } else {
    //   edges.erase(edges.begin());
    // }
    edges.erase(std::remove_if(edges.begin(), edges.end(),
                            [src, dst, w] (std::shared_ptr<Edge> &e) {
                              bool result = false;
                              if ((e->getSrc() == src)
                              && (e->getDest() == dst)
                              && (e->getWeight() == w)) {
                                result = true;
                                e->getSrcPtr().reset();
                                e->getDestPtr().reset();
                                e->getWeightPtr().reset();
                                e.reset();
                              }
                              return result;
                            }), edges.end());
    // printEdges(src);
    // edges.erase(std::remove_if(edges.begin(), edges.end(),
    //                         [] (std::shared_ptr<Edge> &e) {
    //                           return (!e);
    //                         }), edges.end());

    // std::cout << "edge at " << src << " to " << dst << " with weight " << w << "was deleted\n";
    // printEdges(src);

    // Update edge count of src node.
    for (auto node : nodes) {
      // if (node->getData() == "a") {
      //   std::cout << "edge count of a= " << node->getEdgeCount() << "\n";
      // }
      if (node->getData() == src) {
        // std::cout << node->getData() << " node's edge count is before deleting now: " << node->getEdgeCount() << "\n";
        node->setEdgeCount(node->getEdgeCount() - 1);
        // std::cout << "removing edge at " << src << " to " << dst << "\n";
        // std::cout << node->getData() << " node's edge count is now " << node->getEdgeCount() << "\n";
      }
    }
    // printEdges(src);

  // }
}

template <typename N, typename E>
bool Graph<N, E>::isConnected(const N& src, const N& dst) const {
  bool isConnected = false;
  // Check src and dst nodes exist.
  if (!isNode(src) && !isNode(dst)) {
      throw std::runtime_error("Source or destination node does not exist!");
  } else {
    for (const auto edge : edges) {
      if (edge->getSrc() == src && edge->getDest() == dst) {
         isConnected = true;
      }
    }
  }
  return isConnected;
}

template <typename N, typename E>
void Graph<N, E>::clear() noexcept {
  for (auto node : nodes) {
    node->getDataPtr().reset();
    node.reset();
  }
  nodes.clear();
  for (auto edge : edges) {
    edge->getSrcPtr().reset();
    edge->getDestPtr().reset();
    edge->getWeightPtr().reset();
    edge.reset();
  }
  edges.clear();
}

template <typename N, typename E>
void Graph<N, E>::printEdges(const N& val) const {
  // std::cout << "printEdges(" << val << ") ran \n";
  // Check node exists.
  // if (isNode(val)) {
    // std::cout << val << " node exists! this print should run..\n";
  // }
  if (!isNode(val)) {
    throw std::runtime_error("Node does not exist!");
  } else {
    std::cout << "Edges attached to Node " << val << std::endl;
    // Check if outdegree node is 0, early exit, and print "(null)".
    bool nodeHasOutgoingEdges = true;
    for (auto const node : nodes) {
      if (node->getData() == val) {
        if (node->getEdgeCount() == 0) {
          nodeHasOutgoingEdges = false;
          std::cout << "(null)" << std::endl;
        }
      }
    }
    if (nodeHasOutgoingEdges) {
      // Get all outgoing edges of node.
      std::vector<std::shared_ptr<Edge>> outgoingEdges;
      for (const auto edge : edges) {
        if (edge->getSrc() == val) {
          outgoingEdges.push_back(edge);
        }
      }

      if (outgoingEdges.size() > 1) {
        // Sort through outgoing edges found in increasing order of weights.
        std::sort(outgoingEdges.begin(), outgoingEdges.end(),
                  [] (const std::shared_ptr<Edge> e1,
                      const std::shared_ptr<Edge> e2) -> bool {
                          bool result = e1->getWeight() == e2->getWeight()
                                        ? e1->getDest() < e2->getDest()
                                        : e1->getWeight() < e2->getWeight();
                          return result;
                  }
                );
      }
      for (const auto edge : outgoingEdges) {
        std::cout << edge->getDest() << " " << edge->getWeight() << std::endl;
      }
    }
  }
}

/**
 * Iterators
 */

template <typename N, typename E>
void Graph<N, E>::begin() const {
  it = nodes.begin();
}

template <typename N, typename E>
bool Graph<N, E>::end() const {
  return it == nodes.end();
}

template <typename N, typename E>
void Graph<N, E>::next() const {
  ++it;
}

template <typename N, typename E>
const N& Graph<N, E>::value() const {
  std::shared_ptr<Node> n = *it;
  // std::cout << "n:" << n->getData() << "\n";
  return n->getData();
}


// [TODO: Print edges function, mergeReplace, test with other test files
//  on deleting functions etc]

/**
 * Helper function
 * ----------------------------------------
 * Usage: findNode(val)
 * Given a value, finds the corresponding node in the graph for it.
 * Returns a null pointer if no node found.
 */
// template <typename Node, typename N, typename E>
// template <typename N, typename E>
// std::shared_ptr<Node> Graph<N, E>::findNode(const N& val) {
//   std::shared_ptr<Node> foundNode;
//   for (auto const node : nodes) {
//     if (node.data == val) {
//       foundNode = node;
//     }
//   }
// }
